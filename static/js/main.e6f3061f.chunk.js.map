{"version":3,"sources":["util/util.js","component/GridCell.js","App.js","serviceWorker.js","index.js"],"names":["shallowEquals","arr1","arr2","length","equals","i","arrayDiff","map","a","GridCell","props","classes","foodCell","snakeCell","react_default","createElement","className","style","height","size","width","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveFood","moveFoodTimeout","clearTimeout","x","parseInt","Math","random","numCells","y","setState","food","setTimeout","setDirection","event","keyCode","changeDirection","forEach","dir","indexOf","state","direction","moveSnake","newSnake","clonedSnake","toConsumableArray","snake","push","apply","slice","s","checkIfAteFood","isValid","doesntOverlap","endGame","newSnakeSegment","lastSegment","lastPositionOptions","concat","cell","filter","c","startGame","removeTimers","moveSnakeInterval","setInterval","status","el","focus","clearInterval","document","addEventListener","removeEventListener","_this2","_this$state","floor","cellSize","cellIndexes","Array","from","keys","overlay","onClick","onKeyDown","ref","component_GridCell","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6f3061f.chunk.js","sourcesContent":["export const shallowEquals = (arr1, arr2) => {\n    if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\n    var equals = true;\n    for (var i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) equals = false;\n    }\n    return equals;\n};\n\nexport const arrayDiff = (arr1, arr2) => {\n    return arr1.map(function (a, i) {\n        return a - arr2[i];\n    });\n};\n\n\n","import React from 'react';\n\nconst GridCell = (props) => {\n    const classes = \"grid-cell \\n\" + (\n        props.foodCell ? \"grid-cell--food\" : \"\") + \" \\n\" + (\n        props.snakeCell ? \"grid-cell--snake\" : \"\") + \"\\n\";\n    return (\n        <div className={classes} style={{ height: props.size + \"px\", width: props.size + \"px\" }} />\n    );\n};\n\nexport default GridCell;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { arrayDiff, shallowEquals } from './util/util';\nimport GridCell from './component/GridCell';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            snake: [],\n            food: [],\n            status: 0,\n            direction: 39\n        };\n    }\n\n    componentWillMount() {\n        document.addEventListener(\"keydown\", this.setDirection);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.setDirection);\n        this.removeTimers();\n    }\n\n    moveFood = () => {\n        if (this.moveFoodTimeout) {\n            clearTimeout(this.moveFoodTimeout);\n        }\n        var x = parseInt(Math.random() * this.numCells);\n        var y = parseInt(Math.random() * this.numCells);\n        this.setState({ food: [x, y] });\n        this.moveFoodTimeout = setTimeout(this.moveFood, 5000);\n    };\n\n    setDirection = (event) => {\n        var keyCode = event.keyCode;\n        var changeDirection = true;\n        [[38, 40], [37, 39]].forEach((dir) => {\n            if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\n                changeDirection = false;\n            }\n        });\n        if (changeDirection) {\n            this.setState({ direction: keyCode });\n        }\n    };\n\n    moveSnake = () => {\n        var newSnake = [];\n        var clonedSnake = [...this.state.snake];\n        // set in the new \"head\" of the snake\n        switch (this.state.direction) {\n            // down\n        case 40:\n            newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\n            break;\n            // up\n        case 38:\n            newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\n            break;\n            // right\n        case 39:\n            newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\n            break;\n            // left\n        case 37:\n            newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\n            break;\n        default:\n        }\n        // now shift each \"body\" segment to the previous segment's position\n        [].push.apply(\n            newSnake,\n            this.state.snake.slice(1).map(function (s, i) {\n                // since we're starting from the second item in the list,\n                // just use the index, which will refer to the previous item\n                // in the original list\n                return clonedSnake[i];\n            }));\n\n\n        this.setState({ snake: newSnake });\n\n        this.checkIfAteFood(newSnake);\n        if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\n            // end the game\n            this.endGame();\n        }\n    };\n\n    checkIfAteFood = (newSnake) => {\n        if (!shallowEquals(newSnake[0], this.state.food)) {\n            return;\n        }\n        // snake gets longer\n        var newSnakeSegment = void 0;\n        var lastSegment = newSnake[newSnake.length - 1];\n\n        // where should we position the new snake segment?\n        // here are some potential positions, we can choose the best looking one\n        var lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n\n        // the snake is moving along the y-axis, so try that instead\n        if (newSnake.length > 1) {\n            lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\n        }\n\n        for (var i = 0; i < lastPositionOptions.length; i++) {\n            newSnakeSegment = [\n                lastSegment[0] + lastPositionOptions[i][0],\n                lastSegment[1] + lastPositionOptions[i][1]];\n\n            if (this.isValid(newSnakeSegment)) {\n                break;\n            }\n        }\n\n        this.setState({\n            snake: newSnake.concat([newSnakeSegment]),\n            food: [],\n        }, this.moveFood);\n    };\n\n    isValid = cell => (\n        cell[0] > -1 &&\n        cell[1] > -1 &&\n        cell[0] < this.numCells &&\n        cell[1] < this.numCells\n    );\n\n    doesntOverlap = snake => (\n        snake.slice(1).filter(function (c) {\n            return shallowEquals(snake[0], c);\n        }).length === 0\n    );\n\n    startGame = () => {\n        this.removeTimers();\n        this.moveSnakeInterval = setInterval(this.moveSnake, 130);\n        this.moveFood();\n\n        this.setState({\n            status: 1,\n            snake: [[5, 5]],\n            food: [10, 10],\n        });\n\n        //need to focus so keydown listener will work!\n        this.el.focus();\n    };\n\n    endGame = () => {\n        this.removeTimers();\n        this.setState({\n            status: 2,\n        });\n    };\n    removeTimers = () => {\n        if (this.moveSnakeInterval) {\n            clearInterval(this.moveSnakeInterval);\n        }\n        if (this.moveFoodTimeout) {\n            clearTimeout(this.moveFoodTimeout);\n        }\n    };\n\n    render() {\n        const { food, snake } = this.state;\n        this.numCells = Math.floor(this.props.size / 15);\n        var cellSize = this.props.size / this.numCells;\n        var cellIndexes = Array.from(Array(this.numCells).keys());\n        var renderCells = () => cellIndexes.map((y) => cellIndexes.map((x) => {\n            var foodCell = food[0] === x && food[1] === y;\n            var snakeCell = snake.filter((c) => (c[0] === x && c[1] === y));\n            snakeCell = snakeCell.length && snakeCell[0];\n            return (\n                <GridCell\n                    foodCell={foodCell}\n                    snakeCell={snakeCell}\n                    size={cellSize}\n                    key={`${x} ${y}`}\n                />\n            );\n        }));\n\n        var overlay = void 0;\n        if (this.state.status === 0) {\n            overlay = (\n                <div className=\"snake-app__overlay\">\n                    <button onClick={this.startGame}>Start </button>\n                </div>\n            );\n\n\n        } else if (this.state.status === 2) {\n            overlay = (\n                <div className=\"snake-app__overlay\">\n                    <div className=\"mb-1\">\n                        <b> OVER</b>\n                    </div>\n                    <div className=\"mb-1\">\n                        Score: {snake.length-1}\n                    </div>\n                    <button onClick={this.startGame}>New game</button>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className=\"snake-app\"\n                onKeyDown={this.setDirection}\n                style={{\n                    width: this.props.size + \"px\",\n                    height: this.props.size + \"px\",\n                }}\n                ref={ref => this.el = ref}\n            >\n                {overlay}\n                <div\n                    className=\"grid\"\n                    style={{\n                        width: this.props.size + \"px\",\n                        height: this.props.size + \"px\",\n                    }}\n                >\n                    {renderCells()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App size={450} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}